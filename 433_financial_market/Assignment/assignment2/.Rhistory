demo()
install.packages("ivmodel")
install.packages("ggplot2")
choose(3,1)
nlist <- c(1,2,5,10,50,100,1000)
p <- 0.1
for (n in nlist) {}
nlist <- c(1,2,5,10,20,50,100,1000) p <-0.1
zmax <- 5
for (n in nlist) {
k <- 0:n
f <- dbinom(k,n,p)
barplot(f, names = k, xlab="Scaling Variable z", ylab="Probability", main=paste("Binomial Distribution, p=",p," n=",n))
readline()
}
readline()
nlist <- c(1,2,5,10,20,50,100,1000)
p <-0.1
for (n in nlist) {
k <- 0:n
f <- dbinom(k,n,p)
barplot(f, names = k, xlab="Scaling Variable z", ylab="Probability", main=paste("Binomial Distribution, p=",p," n=",n))
readline()
}
nlist <- c(1,2,5,10,20,50,100,1000)
p <-0.1
for (n in nlist) {
k <- 0:n
f <- dbinom(k,n,p)
barplot(f, names = k, xlab="Scaling Variable z", ylab="Probability", main=paste("Binomial Distribution, p=",p," n=",n))
readline()
}
nlist <- c(1,2,5,10,20,50,100,1000)
p <-0.1
for (n in nlist) {
k <- 0:n
f <- dbinom(k,n,p)
barplot(f, names = k, xlab="Scaling Variable z", ylab="Probability", main=paste("Binomial Distribution, p=",p," n=",n))
readline()
}
nlist <- c(1,2,5,10,20,50,100,1000)
p <-0.1
for (n in nlist) {
k <- 0:n
f <- dbinom(k,n,p)
barplot(f, names = k, xlab="Scaling Variable z", ylab="Probability", main=paste("Binomial Distribution, p=",p," n=",n))
readline()
}
t <- 1;
S0 <- 100
K <- 100
r = 0.06
sigma = 0.15
dt <- 1/1000;
Nt <- t / dt;
Np <- 1000;
return <- matrix(rnorm(Nt*Np, mean = r * dt, sd = sigma * sqrt(dt)), nrow = Nt)
s <- matrix (0, Nt + 1, Np)
for (k in 1:Nt) {
s[k+1, ] <- s[k,] + return[k,]
}
S <- exp(s[Nt+1,])* S0
V <- rep(0,Np)
for (i in 1:Np) {
if (S[i] < K){
V[i] = 0;
}
else {
V[i] = S[i] - K;
}
}
C <- exp(-r*t) * mean(V)
C
t <- 1;
S0 <- 100
K <- 100
r = 0.06
sigma = 0.15
dt <- 1/1000;
Nt <- t / dt;
Np <- 1000;
return <- matrix(rnorm(Nt*Np, mean = r * dt, sd = sigma * sqrt(dt)), nrow = Nt)
s <- matrix (0, Nt + 1, Np)
for (k in 1:Nt) {
s[k+1, ] <- s[k,] + return[k,]
}
S <- exp(s[Nt+1,])* S0
V <- rep(0,Np)
for (i in 1:Np) {
if (S[i] < K){
V[i] = 0;
}
else {
V[i] = S[i] - K;
}
}
C <- exp(-r*t) * mean(V)
C
t <- 1;
t <- 1;
t <- 1;
t <- 1;
S0 <- 100
K <- 100
r = 0.06
sigma = 0.15
dt <- 1/1000;
Nt <- t / dt;
Np <- 1000;
return <- matrix(rnorm(Nt*Np, mean = r * dt, sd = sigma * sqrt(dt)), nrow = Nt)
s <- matrix (0, Nt + 1, Np)
for (k in 1:Nt) {
s[k+1, ] <- s[k,] + return[k,]
}
S <- exp(s[Nt+1,])* S0
V <- rep(0,Np)
for (i in 1:Np) {
if (S[i] < K){
V[i] = 0;
}
else {
V[i] = S[i] - K;
}
}
C <- exp(-r*t) * mean(V)
C
t <- 1;
S0 <- 100
K <- 100
r = 0.06
sigma = 0.15
dt <- 1/10000;
Nt <- t / dt;
Np <- 10000;
return <- matrix(rnorm(Nt*Np, mean = r * dt, sd = sigma * sqrt(dt)), nrow = Nt)
s <- matrix (0, Nt + 1, Np)
for (k in 1:Nt) {
s[k+1, ] <- s[k,] + return[k,]
}
S <- exp(s[Nt+1,])* S0
V <- rep(0,Np)
for (i in 1:Np) {
if (S[i] < K){
V[i] = 0;
}
else {
V[i] = S[i] - K;
}
}
C <- exp(-r*t) * mean(V)
?normcdf
pwd
cwd
getwd()
setwd("/Users/grant/Desktop/MIT/2020fall/2020_fall_notes/433_financial_market/Assignment/assignment2")
getwd()
?read.csv
read.csv(file = "25_Portfolios_5x5.CSV", skip - 15)
read.csv(file = "25_Portfolios_5x5.CSV", skip = 15)
5_by_5 -> read.csv(file = "25_Portfolios_5x5.CSV", skip = 15)
5by5 -> read.csv(file = "25_Portfolios_5x5.CSV", skip = 15)
twentyFive -> read.csv(file = "25_Portfolios_5x5.CSV", skip = 15)
5by5 <- read.csv(file = "25_Portfolios_5x5.CSV", skip = 15)
twentyFive <- read.csv(file = "25_Portfolios_5x5.CSV", skip = 15)
View(twentyFive)
View(twentyFive)
install.packages(AER)
install.packages("AER")
library("AER")
install.packages("AER",repo = 'https://mac.R-project.org')
lm(twentyFive$SMALL.LoBM ~ twentyFive$ME1.BM2)
